plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.5'
    id 'jacoco'
}

group = 'net.shamansoft'
version = '0.3.19'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

springBoot {
	buildInfo()   // This will generate a build-info.properties file with accurate values
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	mockitoAgent
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.jsoup:jsoup:1.15.3'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testImplementation("org.mockito:mockito-core:5.14.0")
	mockitoAgent("org.mockito:mockito-core:5.14.0") {
		transitive = false
	}
}

bootJar {
	archiveFileName = 'cookbook.jar'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generate report after tests run
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11" // Use the latest stable version
}

jacocoTestReport {
    dependsOn test // Tests are required to run before generating the report
    reports {
        xml.required = true // XML report for CI tools like SonarQube
        html.required = true // HTML report for human readability
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.4 // 40% code coverage achieved
            }
        }
    }
}

// Add a task to check coverage
tasks.register('checkCoverage') {
    dependsOn test
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}

graalvmNative {
	binaries {
		main {
			imageName = 'cookbook'
			buildArgs.addAll(
					'--no-fallback',
					'--initialize-at-run-time=org.apache.commons.logging.LogFactory,org.apache.commons.logging.LogFactoryService',
					'--initialize-at-run-time=ch.qos.logback',
					'-H:+ReportExceptionStackTraces'
			)
			resources.autodetect()
		}
	}
}