FROM --platform=linux/amd64 ghcr.io/graalvm/native-image-community:21 AS builder

WORKDIR /app
RUN microdnf install findutils

# Option 1: Dependency caching
COPY build.gradle settings.gradle ./
COPY gradle gradle
COPY gradlew ./
RUN ./gradlew dependencies

COPY . .
#RUN --mount=type=cache,target=/root/.gradle \
#    ./gradlew nativeCompile

# Extreme memory optimization settings
ENV JAVA_OPTS="-Xmx8g -XX:MaxMetaspaceSize=512m"
ENV NATIVE_IMAGE_OPTS="-J-Xmx2560m -J-XX:MaxMetaspaceSize=512m -H:+PrintAnalysisCallTree -H:MaximumHeapSizePercent=50"

# Run native compilation with memory constraints and incremental build support
RUN --mount=type=cache,target=/root/.gradle \
    ./gradlew -Dorg.gradle.jvmargs="-Xmx6g" nativeCompile \
    -Porg.graalvm.buildtools.native.targetPlatform=linux-amd64 \
    -Porg.graalvm.buildtools.native.imageName=cookbook

FROM --platform=linux/amd64 gcr.io/distroless/base-debian12
# Install libz dependency
COPY --from=debian:11-slim /lib/x86_64-linux-gnu/libz.so.1 /lib/x86_64-linux-gnu/
COPY --from=debian:11-slim /lib/x86_64-linux-gnu/libz.so.1.2.11 /lib/x86_64-linux-gnu/

WORKDIR /app
COPY --from=builder /app/build/native/nativeCompile/cookbook .
# Expose the port (though Cloud Run handles this, it's good practice)
EXPOSE $PORT

# Set the startup command, using the PORT environment variable
CMD ["./cookbook", "--server.port=${PORT}"]